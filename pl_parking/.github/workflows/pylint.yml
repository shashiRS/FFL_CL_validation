name: Pylint Check and Comment

on:
  pull_request:
    branches: [master, develop, "release/**", sandbox/**]

jobs:
  pylint:
    runs-on: linux-dind 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python(3.9)
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install pip==21.1.3
          rm -rf .pylint.d
          pip install pylint==2.17.2
          pip install astroid==2.15.3

      - name: Run Pylint
        id: pylint
        run: |
          pylint pl_parking --disable=all --enable=E1101 --score=false 2>&1 | tee pylint-output.txt
        # continue-on-error: true  # Continue even if pylint fails

      - name: Run Imports Check
        id: import_check
        run: |
          python -m venv venv
          python utils//copy_pip_to_venv.py
          source venv//bin//activate
          python -m pip install --upgrade pip
          python -m pip cache purge
          python -m pip install -e .
          pip install adas-tsf==2.12.26
          python utils//venv_scanning_script.py .. 2>&1 | tee imports-output.txt
        # continue-on-error: true  # Continue even if imports check fails

      - name: Comment on Pull Request with Pylint output
        uses: actions/github-script@v6
        id: comment
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            // Read Pylint output
            const pylintOutput = fs.existsSync('pylint-output.txt')
              ? fs.readFileSync('pylint-output.txt', 'utf8')
              : '';

            // Read imports check output
            const additionalText = fs.existsSync('imports-output.txt')
              ? fs.readFileSync('imports-output.txt', 'utf8')
                .split('\n')
                .filter(line => line.startsWith('ERROR'))
                .join('\n')
              : '';

            // Combine outputs
            const combinedOutput = `${pylintOutput}\n\n\n${additionalText}`;

            const lines = pylintOutput.split('\n');
            const import_lines = additionalText.split('\n');
            
            // Check if there are any errors to report in the comment
            if ((lines.length > 0 && lines[0].trim() !== '') || (import_lines.length > 0 && import_lines[0].trim() !== '')) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### Errors detected\n\n\`\`\`\n${combinedOutput}\n\`\`\``
              });
              console.error("Errors detected");
              process.exit(1);
            } else {
              console.log("No errors detected");
            }